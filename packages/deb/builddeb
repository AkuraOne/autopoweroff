#!/bin/bash

{
#ARCH=`uname -i`
RELEASE=`perl -ne "print if s/.*?@Version@-(\d+)/\1/g;" control.in`
ARCH="noarch"

if [ "$1" != '--make' ]; then
  cd ../..
  make deb
  exit
else
  set -e
  umask 022
  # Calling configure with --enable-install-for-deb so that the spec file
  # is properly generated.
  echo "======================================================================"
  echo "== builddeb:  ./configure called for setting everything properly"
  #env

  BUILD=`pwd`"/build"
  rm -rf "${BUILD}"
  mkdir -p "${BUILD}/DEBIAN"
  rm -f autopoweroff*.deb

  cd ../..
  ./configure --prefix=${BUILD} \
              --datarootdir=${BUILD}/usr/share \
              --docdir=${BUILD}/usr/share \
              --datadir=${BUILD}/usr/share/autopoweroff \
              --enable-install-for-deb

  make install
  cd -

  # WARNING:
  #
  #  When called from the Makefile, this scripts inherits the autopoweroff_*
  #  variables such as ${autopoweroff_bindir}.  However, the values of
  #  these variables are wrong, comming from a previous install, not this
  #  one.  We just called above ./configure, but cannot inherit the
  #  variables from the generated files.  Thus we have no choice to
  #  hardcode the variables here, overwritting their wrong values.
  export autopoweroff_bindir="/usr/bin"
  export autopoweroff_sbindir="/usr/sbin"

  # Setting up the proper init file for Ubuntu/Debian.

  cd ${BUILD}/usr/share/autopoweroff
  rm init.d/autopoweroff.redhat
  mkdir -p ${BUILD}/etc/init.d
  mv init.d/autopoweroff.lsb ${BUILD}/etc/init.d/autopoweroff
  rm -rf init.d
  cd -

  mkdir -p ${BUILD}${autopoweroff_bindir}
  cat >${BUILD}${autopoweroff_bindir}/autopoweroff <<EOS
#!/bin/bash
pkexec ${autopoweroff_sbindir}/autopoweroff-gui
EOS
  chmod 755 ${BUILD}${autopoweroff_bindir}/autopoweroff

  rm -f ${BUILD}/usr/sbin/${PACKAGE}-uninstall

  rm -rf "${BUILD}/etc/pam.d" "${BUILD}/etc/security"  # Removing Fedora stuff
  mv control "${BUILD}/DEBIAN"
  chmod 755 postinst postrm
  cp -p conffiles "${BUILD}/DEBIAN/."
  mv postinst postrm "${BUILD}/DEBIAN/."
  set -e
  fakeroot dpkg-deb --build "${BUILD}"  # Build package with files owned by root:root
  dpkg -c build.deb  # Simply show content of debian package.
  set +e
  lintian build.deb  # Check if package is properly setup.
  DEB="${PACKAGE}-${VERSION}-${RELEASE}.${ARCH}.deb"
  mv build.deb "${DEB}"
  rm -f ${PACKAGE}.${ARCH}.deb
  ln -s "${DEB}" "${PACKAGE}.${ARCH}.deb"

  cat <<EOM
Note that if you have issues with configuration files /etc/${PACKAGE}/*
not being installed, it is caused by Debian's packaging system being out
of sync with the filesystem.  To fix this, run:

  sudo apt purge ${PACKAGE};

To install the created package, run:

  sudo dpkg -i "${PWD}/${DEB}"

EOM

fi
} 2>&1 | tee builddeb.log
